#+TITLE: macOS Ã— Nix

[[https://builtwithnix.org][https://img.shields.io/badge/Built_With-Nix-5277C3.svg?logo=nixos&labelColor=73C3D5]]

#+begin_quote
Reproducible, declarative and reliable macOS with Nix.
#+end_quote

+ [[https://developer.apple.com/macos/][macOS]] is good, but only the GUI-related parts.
+ [[https://nixos.org/download.html#download-nix][Nix]] and [[https://nixos.org/][NixOS]] are good, except for the GUI-related parts, such as X Window System, Wayland, etc.

Why not enjoy the best parts of them? Then, here *macOS Ã— Nix* comes:
+ macOS provides great UI.
+ Nix acts as a configuration and package manager, which makes macOS *reproducible*:
  + most parts of configurations are managed by Nix.
  + all softwares are managed by Nix.

This repo will:
+ Introduce how to install Nix-related tools.
+ Manage dependencies with [[https://github.com/nmattia/niv/][niv]].
+ Manage sensitive information with [[https://github.com/AGWA/git-crypt][git-crypt]].
+ Provide a sample configuration that I use.

* Hold on, do I need Nix, really?
In the past:
+ I managed my dotfiles via homemade scripts or some other existing tools, such as [[https://github.com/andsens/homeshick][homeshick]], [[https://www.gnu.org/software/stow/][stow]], [[https://yadm.io/][yadm]], etc.
+ I managed packages via system package manager when I use Linux, via Homebrew when I use macOS.

The experience is not bad, but it's not good either.

Now, I manage everything with one tool - Nix. In addition to these, it is also possible to manage macOS preferences, launchd, etc.

I'm not sure that you need it, but I promise that you will like it.

* Choose macOS version
I'm using macOS Monterey.

#+begin_quote
Following steps aren't tested on newer version of macOS.
#+end_quote

* Install macOS
1. [[https://support.apple.com/en-us/HT201372][create a bootable installer for macOS]].
2. enter macOS Recovery:
   - [[https://support.apple.com/en-us/HT204455][set a firmware password]].
   - earse the disk.
3. installing macOS with the bootable installer.
4. after installation:
   - [[https://support.apple.com/en-us/HT204063][clear NVRAM]].
   - use strong password without a hint.
   - enable FileVault.
   - enable Firewall.
   - setup =System Preferences > Security & Privacy > General > Require password *immediately* after sleep or screen saver begins=.

#+begin_quote
APFS(encrypted) equals to APFS with File Vault enabled.
#+end_quote

#+begin_quote
If you care about security, read [[https://github.com/drduh/macOS-Security-and-Privacy-Guide][macOS-Security-and-Privacy-Guide]], too.
#+end_quote

* Install Nix
** installation

From [[https://nixos.org/download.html#nix-install-macos][official installation]]:
#+begin_src sh
$ sh <(curl -L https://nixos.org/nix/install)
#+end_src

#+begin_quote
If you care about security, read [[https://nixos.org/download.html#nix-verify-installation][verify installation]].
#+end_quote

** verify installation
#+begin_src sh
$ nix-env --version
#+end_src

* Install nix-darwin
[[https://github.com/LnL7/nix-darwin][nix-darwin]] turns macOS into an emulated NixOS.

It allows us configure dock, finder, launchd, software update policy with Nix expressions, etc.

Just install it according to official docs.

* Install Homebrew
Some software, especially the GUI applications are not provided by Nix. [[https://brew.sh][Homebrew]] is a good addition for the missing parts.

Just install it according to official docs with default options. *nix-darwin* will take care of the rest.

#+begin_quote
Think of *Homebrew* as an additional source of software for *nix*. =brew= will never be called  from CLI directly.
#+end_quote

* Take a break
Now, the basic setup has been completed.

* Change default shell
Add =/run/current-system/sw/bin/bash= to =/etc/shells=, then run:
#+begin_src sh
$ chsh -s /run/current-system/sw/bin/bash
#+end_src

* Use sample configuration
Link config to =~/.nixpkgs= with following command:
#+begin_src sh
$ ./bootstrap.sh
#+end_src

Rebuild system with =darwin-rebuild=:
#+begin_src sh
$ darwin-rebuild switch -I darwin-config=$HOME/.nixpkgs/configuration.nix
#+end_src

After that, you can rebuild system as normal:
#+begin_src sh
$ darwin-rebuild switch
#+end_src

* Fine-tune the system manually
#+begin_quote
Not everything can be done automatically.
#+end_quote

** link =~/Desktop= to a custom place
#+begin_src sh
$ ,macos-link-desktop
#+end_src

** disable spotlight
#+begin_src sh
$ sudo ,macos-disable-spotlight
#+end_src

#+begin_quote
Spotlight is useless for an old-fashion guy. ðŸ˜³
#+end_quote

* Reboot

Reboot is required for some packages, such as =macfuse= which is installed by the sample configuration.

* Restore Backups

I use [[https://www.borgbackup.org/][BorgBackup]] as my backup tool.

Because everything is reproducible, TimeMachine is useless.

Restore backups:
#+begin_src sh
$ export BORG_REPO=/path/to/borg-repo
$ borg mount ::2021-04-21T11:34:37 /path/to/mount/point
$ cp -rp <...> /path/to/your/home
#+end_src

* (optional) Post Setup
Read more at [[./POST-SETUP.org][here]].

* Release more power of Nix
+ [[https://nix.dev/][use Nix in your daily development]].
+ manage virtual machine for local development with [[https://github.com/NixOS/nixops][NixOps]].
+ [[https://github.com/tazjin/nix-1p][learn Nix language]] as you need it.
+ [[https://github.com/justinwoo/nix-shorts/blob/master/posts/inspecting-values-with-repl.md][learn Nix REPL a little bit]]
+ [[https://nixos.org/guides/nix-pills/][understand the fundamental ideas of Nix]]
+ read official docs:
   - [[https://nixos.org/manual/nix/stable/][Nix Manual]]
   - [[https://nixos.org/manual/nixpkgs/stable/][Nixpkgs Manaual]]
   - [[https://nixos.wiki/wiki/FAQ/Pinning_Nixpkgs][Pinning Nixpkgs]]

* Others' config
+ [[https://github.com/cmacrae/config][cmacrae's config]]
+ [[https://github.com/lovesegfault/nix-config][lovesegfault's config]]
+ [[https://github.com/gvolpe/nix-config][gvolpe's config]]

* References
+ [[https://medium.com/ci-t/set-up-a-virtualbox-vm-with-4-vboxmanage-commands-9266a5ee885d][Set up a VirtualBox VM with 4 VBoxManage commands]]
+ [[https://ma.ttias.be/auto-start-virtualbox-vms-headless-after-reboot-on-mac-osx/][Auto-start VirtualBox VMs (headless) after reboot on Mac OSX]]

* Last
Have fun!
