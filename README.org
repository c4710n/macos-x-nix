#+TITLE: macOS Ã— Nix

[[https://builtwithnix.org][https://img.shields.io/badge/Built_With-Nix-5277C3.svg?logo=nixos&labelColor=73C3D5]]

#+begin_quote
Reproducible, declarative and reliable macOS with Nix.
#+end_quote

+ [[https://developer.apple.com/macos/][macOS]] is good, but only the GUI-related parts.
+ [[https://nixos.org/download.html#download-nix][Nix]] and [[https://nixos.org/][NixOS]] are good, except for the GUI-related parts, such as X Window System, Wayland, etc.

Why not enjoy the best parts of them? Then, here *macOS Ã— Nix* comes:
+ macOS provides great UI.
+ Nix acts as a configuration and package manager, which makes macOS *reproducible*:
  + most parts of configurations are managed by Nix.
  + all softwares are managed by Nix.

This repo will:
+ Introduce how to install Nix-related tools.
+ Manage dependencies with [[https://github.com/nmattia/niv/][niv]].
+ Manage sensitive information with [[https://github.com/AGWA/git-crypt][git-crypt]].
+ Provide a sample configuration that I use.

* Hold on, do I need Nix, really?
In the past:
+ I managed my dotfiles via homemade scripts or some other existing tools, such as [[https://github.com/andsens/homeshick][homeshick]], [[https://www.gnu.org/software/stow/][stow]], [[https://yadm.io/][yadm]], etc.
+ I managed packages via system package manager when I use Linux, via Homebrew when I use macOS.

The experience is not bad, but it's not good either.

Now, I manage everything with one tool - Nix. In addition to these, it is also possible to manage macOS preferences, launchd, etc.

I'm not sure that you need it, but I promise that you will like it.

* Choose macOS version
I'm using macOS Big Sur.

#+begin_quote
Following steps aren't tested on newer version of macOS.
#+end_quote

* Install macOS
First, [[https://support.apple.com/en-us/HT201372][create a bootable installer for macOS]].

Then, use the prepared USB flash drive to install macOS as normal.

Then, enable:
+ FileVault
+ Firewall

#+begin_quote
APFS(encrypted) equals to APFS with File Vault enabled.
#+end_quote

#+begin_quote
If you care about security, read [[https://github.com/drduh/macOS-Security-and-Privacy-Guide][macOS-Security-and-Privacy-Guide]], too.
#+end_quote

* Setup macOS
** setup keyboard layout
If you are using non-standard keyboard layout, such as [[https://www.kaufmann.no/roland/dvorak/][Programmer Dovrak]], etc. It's time to set it up.

*** (optional) setup modifier keys
+ =Caps Lock= -> =Control=
+ =Option= -> =Command=
+ =Command= -> =Option=

*** (options) setup shortcuts for changing input sources
#+begin_src text
System Preferences > Keyboard > Shortcuts > Input Sources > Select input source
#+end_src

** (optional) setup global proxy
In my country, the internet is audited by goverment. I would like to configure a proxy. Or, I can't install Nix.

Possible tools:
+ [[https://nssurge.com/][Surge for Mac]]
+ [[https://github.com/yichengchen/clashX][ClashX]]
+ ...

* Install Nix
** download and verify installation script
From [[https://nixos.org/download.html#nix-verify-installation][official installation]]:
#+begin_src sh
$ curl -o install-nix-2.6.0 https://releases.nixos.org/nix/nix-2.6.0/install
$ curl -o install-nix-2.6.0.asc https://releases.nixos.org/nix/nix-2.6.0/install.asc
$ gpg2 --keyserver hkps://keyserver.ubuntu.com --recv-keys B541D55301270E0BCF15CA5D8170B4726D7198DE
$ gpg2 --verify ./install-nix-2.6.0.asc
#+end_src

If everything is fine, then install it via the recommended [[https://nixos.org/manual/nix/stable/installation/multi-user.html][multi-user installation]], and with macOS limited options:
#+begin_src sh
$ sh ./install-nix-2.6.0 --daemon --darwin-use-unencrypted-nix-store-volume
#+end_src

#+begin_quote
The option =--darwin-use-unencrypted-nix-store-volume= is no longer needed and will be removed in the future.
#+end_quote

** verify installation
#+begin_src sh
$ nix-env --version
#+end_src

* Install nix-darwin
[[https://github.com/LnL7/nix-darwin][nix-darwin]] turns macOS into an emulated NixOS.

It allows us configure dock, finder, launchd, software update policy with Nix expressions, etc.

Just install it according to official docs.

** (optional) setup shell environment
=/etc/static/bashrc= which is the bash profile setup by *nix-darwin* will read =/etc/bash.local=.

* Install Homebrew
Some software, especially the GUI applications are not provided by Nix. [[https://brew.sh][Homebrew]] is a good addition for the missing parts.

Just install it according to official docs with default options. *nix-darwin* will take care of the rest.

#+begin_quote
Think of *Homebrew* as an additional source of software for *nix*. =brew= will never be called  from CLI directly.
#+end_quote

* Take a break
Now, the basic setup has been completed.

* Change default shell
Add =/run/current-system/sw/bin/bash= to =/etc/shells=, then run:
#+begin_src sh
$ chsh -s /run/current-system/sw/bin/bash
#+end_src

* Use sample configuration
Link config to =~/.nixpkgs= with following command:
#+begin_src sh
$ ./bootstrap.sh
#+end_src

Rebuild system with =darwin-rebuild=:
#+begin_src sh
$ darwin-rebuild switch -I darwin-config=$HOME/.nixpkgs/configuration.nix
#+end_src

After that, you can rebuild system as normal:
#+begin_src sh
$ darwin-rebuild switch
#+end_src

* Fine-tune the system manually
#+begin_quote
Not everything can be done automatically.
#+end_quote

** link ~/Desktop to a custom place
#+begin_src sh
$ ,macos-link-desktop
#+end_src

** disable spotlight
#+begin_src sh
$ sudo ,macos-disable-spotlight
#+end_src

#+begin_quote
Spotlight is useless for an old-fashion guy. ðŸ˜³
#+end_quote

** adjust Terminal
+ =View > Hide Tab Bar= - Prevent Terminal.app from displaying a tab bar when there is only one tab open.
+ =Preferences > Profiles > Keyboard > Use Options as Meta key= - Help me to input faster.

* Reboot

Reboot is required for some packages, such as =macfuse= which is installed by the sample configuration.

* Restore Backups

I use [[https://www.borgbackup.org/][BorgBackup]] as my backup tool.

Because everything is reproducible, TimeMachine is useless.

Restore backups:
#+begin_src sh
$ export BORG_REPO=/path/to/borg-repo
$ borg mount ::2021-04-21T11:34:37 /path/to/mount/point
$ cp -rp <...> /path/to/your/home
#+end_src

* Setup for NixOps and NixOps-like tools
Just as the project name implies, we are running Nix on macOS whose architecture name is =x86_64-darwin=. Because the incompatibility of architecture, I can't build software for my =x86_64-linux= server without any effort.

In order to achieve it, I setup a build machine with [[./modules/nix-builder][nix-builder]] module.

And, I need to clearly state the architecture of remote machine in the configuration of NixOps or NixOps-like tools, such as [[https://github.com/DBCDK/morph][morph]], etc. For example:

#+begin_src nix
{
  webserver = { config, pkgs, lib, ... }: {
    deployment.targetHost = "...";
    nixpkgs.localSystem.system = "x86_64-linux";
    # ...
  };
}
#+end_src

Then, use NixOps or NixOps-like tools as normal.

It's done.

* Manage virtual machines
As you can see in above action, I am using a build machine.

But, how I create and manage the virtual machines? I still use Nix.

** build VirtualBox images
#+begin_src sh
$ cd ./nixos-vm

# build a VirtualBox image for nix-bulider
$ nixos-generate --format virtualbox --system x86_64-linux -c vm/nix-builder/image.nix

# build a VirtualBox image for my daily development
$ nixos-generate --format virtualbox --system x86_64-linux -c vm/dev-box/image.nix

# These two commands will generate .ova files.
#+end_src

** create required host-only network

Suppose that the interface name is =vboxnet0=.

#+begin_src sh
# list host-only interface
$ VBoxManage list hostonlyifs
# empty ...

# create one host-only interface
$ VBoxManage hostonlyif create
Name:            vboxnet0
GUID:            786f6276-656e-4074-8000-0a0027000000
DHCP:            Disabled
IPAddress:       192.168.56.1
NetworkMask:     255.255.255.0
IPV6Address:
IPV6NetworkMaskPrefixLength: 0
HardwareAddress: 0a:00:27:00:00:00
MediumType:      Ethernet
Wireless:        No
Status:          Down
VBoxNetworkName: HostInterfaceNetworking-vboxnet0

# enable DHCP server for created interface
$ VBoxManage list dhcpservers
$ VBoxManage dhcpserver modify --ifname vboxnet0 --enable
$ VBoxManage list dhcpservers
#+end_src

** import the VirtualBox images
Import images to VirtualBox with your prefered way.

I prefer using =VBoxManage=:
#+begin_src sh
$ VBoxManage import $OVA_FILE
#+end_src

** add host-only adapter to virtual machine
By default the VM has one interface, which is using NAT. In my case, another host-only interface is required.

When building VirtualBox images, I have added this interface into it. But, it seems that there is a bug, I have to refresh the setting again:

#+begin_src sh
$ VBoxManage list vms
$ VBoxManage modifyvm $VM_NAME --nic2 hostonly --nictype2 virtio --hostonlyadapter2 vboxnet0
#+end_src

** start vm
#+begin_src sh
$ VBoxManage list vms
$ VBoxManage startvm $VM_NAME --type headless
#+end_src

* Release more power of Nix
+ [[https://nix.dev/][use Nix in your daily development]].
+ manage virtual machine for local development with [[https://github.com/NixOS/nixops][NixOps]].
+ [[https://github.com/tazjin/nix-1p][learn Nix language]] as you need it.
+ [[https://github.com/justinwoo/nix-shorts/blob/master/posts/inspecting-values-with-repl.md][learn Nix REPL a little bit]]
+ [[https://nixos.org/guides/nix-pills/][understand the fundamental ideas of Nix]]
+ read official docs:
   - [[https://nixos.org/manual/nix/stable/][Nix Manual]]
   - [[https://nixos.org/manual/nixpkgs/stable/][Nixpkgs Manaual]]
   - [[https://nixos.wiki/wiki/FAQ/Pinning_Nixpkgs][Pinning Nixpkgs]]

* Others' config
+ [[https://github.com/cmacrae/config][cmacrae's config]]
+ [[https://github.com/lovesegfault/nix-config][lovesegfault's config]]

* References
+ [[https://medium.com/ci-t/set-up-a-virtualbox-vm-with-4-vboxmanage-commands-9266a5ee885d][Set up a VirtualBox VM with 4 VBoxManage commands]]
+ [[https://ma.ttias.be/auto-start-virtualbox-vms-headless-after-reboot-on-mac-osx/][Auto-start VirtualBox VMs (headless) after reboot on Mac OSX]]

* Last
Have fun!
